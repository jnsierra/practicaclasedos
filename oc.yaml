apiVersion: apps/v1
kind: Deployment
metadata:
  name: mi-deployment-practica
  namespace: nicolas-sierra-dev
  labels:
    app: mi-app-practica
    areanegocio: tecnologia
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mi-app-practica
  template:
    metadata:
      labels:
        app: mi-app-practica
    spec:
      containers:
        - name: contenedor-principal
          image: jesusnicolassierra/mi-app-flask:build-{{ tag }} # Imagen de Flask desde Docker Hub
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: "500m"
              memory: "800Mi"
            limits:
              cpu: "1000m"
              memory: "1500Mi"
          envFrom:
            - configMapRef:
                name: mi-configmap
            - secretRef:
                name: mi-secret
---
apiVersion: v1
kind: Service
metadata:
  name: mi-servicio-practica
  namespace: nicolas-sierra-dev # Aseg√∫rate de que coincida con tu Deployment
spec:
  selector:
    app: mi-app-practica # Debe coincidir con las labels del Deployment
  ports:
    - protocol: TCP
      port: 4000 # Puerto del Service
      targetPort: 3000 # Puerto del contenedor Flask
  type: ClusterIP # Cambia a NodePort o LoadBalancer si quieres acceso externo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mi-configmap
  namespace: nicolas-sierra-dev
data:
  DATABASE: "192.168.1.1"
---
apiVersion: v1
kind: Secret
metadata:
  name: mi-secret
  namespace: nicolas-sierra-dev
type: Opaque
data:
  PASSWORD: aG9sYQ== # "hola" en base64
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mi-hpa
  namespace: nicolas-sierra-dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mi-deployment-practica
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
